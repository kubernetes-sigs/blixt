// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: dataplane/api-server/proto/backends.proto

package client

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Backends_GetInterfaceIndex_FullMethodName = "/backends.backends/GetInterfaceIndex"
	Backends_Update_FullMethodName            = "/backends.backends/Update"
	Backends_Delete_FullMethodName            = "/backends.backends/Delete"
)

// BackendsClient is the client API for Backends service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendsClient interface {
	GetInterfaceIndex(ctx context.Context, in *PodIP, opts ...grpc.CallOption) (*InterfaceIndexConfirmation, error)
	Update(ctx context.Context, in *Targets, opts ...grpc.CallOption) (*Confirmation, error)
	Delete(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Confirmation, error)
}

type backendsClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendsClient(cc grpc.ClientConnInterface) BackendsClient {
	return &backendsClient{cc}
}

func (c *backendsClient) GetInterfaceIndex(ctx context.Context, in *PodIP, opts ...grpc.CallOption) (*InterfaceIndexConfirmation, error) {
	out := new(InterfaceIndexConfirmation)
	err := c.cc.Invoke(ctx, Backends_GetInterfaceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendsClient) Update(ctx context.Context, in *Targets, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, Backends_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendsClient) Delete(ctx context.Context, in *Vip, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, Backends_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendsServer is the server API for Backends service.
// All implementations must embed UnimplementedBackendsServer
// for forward compatibility
type BackendsServer interface {
	GetInterfaceIndex(context.Context, *PodIP) (*InterfaceIndexConfirmation, error)
	Update(context.Context, *Targets) (*Confirmation, error)
	Delete(context.Context, *Vip) (*Confirmation, error)
	mustEmbedUnimplementedBackendsServer()
}

// UnimplementedBackendsServer must be embedded to have forward compatible implementations.
type UnimplementedBackendsServer struct {
}

func (UnimplementedBackendsServer) GetInterfaceIndex(context.Context, *PodIP) (*InterfaceIndexConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceIndex not implemented")
}
func (UnimplementedBackendsServer) Update(context.Context, *Targets) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBackendsServer) Delete(context.Context, *Vip) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBackendsServer) mustEmbedUnimplementedBackendsServer() {}

// UnsafeBackendsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendsServer will
// result in compilation errors.
type UnsafeBackendsServer interface {
	mustEmbedUnimplementedBackendsServer()
}

func RegisterBackendsServer(s grpc.ServiceRegistrar, srv BackendsServer) {
	s.RegisterService(&Backends_ServiceDesc, srv)
}

func _Backends_GetInterfaceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodIP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendsServer).GetInterfaceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backends_GetInterfaceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendsServer).GetInterfaceIndex(ctx, req.(*PodIP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backends_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Targets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backends_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendsServer).Update(ctx, req.(*Targets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backends_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backends_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendsServer).Delete(ctx, req.(*Vip))
	}
	return interceptor(ctx, in, info, handler)
}

// Backends_ServiceDesc is the grpc.ServiceDesc for Backends service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backends_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backends.backends",
	HandlerType: (*BackendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInterfaceIndex",
			Handler:    _Backends_GetInterfaceIndex_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Backends_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Backends_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/api-server/proto/backends.proto",
}
