name: tests

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch: {}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run unit tests
      run: go test -race -v ./...

  integration-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: cache image builds
      uses: actions/cache@v3
      with:
        path: /var/lib/docker/
        key: ${{ runner.os }}-build-image-cache
        restore-keys: |
          ${{ runner.os }}-build-image-cache-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build images
      run: make build.all.images TAG=integration-tests

    - name: run integration tests
      run: make test.integration
      env:
        BLIXT_CONTROLPLANE_IMAGE: "ghcr.io/kong/blixt-controlplane"
        BLIXT_DATAPLANE_IMAGE: "ghcr.io/kong/blixt-dataplane"
        BLIXT_UDP_SERVER_IMAGE: "ghcr.io/kong/blixt-udp-test-server"
        TAG: "integration-tests"
    
    - name: run integration tests with bpfd
      run: make test.integration
      env:
        BLIXT_CONTROLPLANE_IMAGE: "ghcr.io/kong/blixt-controlplane"
        BLIXT_DATAPLANE_IMAGE: "ghcr.io/kong/blixt-dataplane"
        BLIXT_UDP_SERVER_IMAGE: "ghcr.io/kong/blixt-udp-test-server"
        BLIXT_USE_BPFD: true
        TAG: "integration-tests"

    ## Upload diagnostics if integration test step failed.
    - name: upload diagnostics
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: blixt-integration-test-diag
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

  conformance-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: cache image builds
      uses: actions/cache@v3
      with:
        path: /var/lib/docker/
        key: ${{ runner.os }}-build-image-cache
        restore-keys: |
          ${{ runner.os }}-build-image-cache-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: build images
      run: make build.all.images TAG=conformance-tests

    - name: run conformance tests
      run: make test.conformance
      env:
        BLIXT_CONTROLPLANE_IMAGE: "ghcr.io/kong/blixt-controlplane"
        BLIXT_DATAPLANE_IMAGE: "ghcr.io/kong/blixt-dataplane"
        BLIXT_UDP_SERVER_IMAGE: "ghcr.io/kong/blixt-udp-test-server"
        TAG: "conformance-tests"

    ## Upload diagnostics if conformance test step failed.
    - name: upload diagnostics
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: blixt-integration-test-diag
        path: /tmp/ktf-diag*
        if-no-files-found: ignore
